memory_initialization_radix=2;
memory_initialization_vector=
111000 00000 00001 0000000000000110,
111000 00000 00010 0000000000000110,
100000 00001 00011 00010 00000110000,
111111 00000 00000 0000000000000100,
110011 00001 00111 0000000000000001,
010000 00001 00010 0000000000000010,
010001 00001 00011 1111111111111110,
001111 00101 01100 0000000000000100,
011111 00101 01010 0000000000000100,
001111 00101 00001 0000000000000100,
000011 00001 00010 0000000000000001

li    r1 6		R1=6		PC=0
li    r2 6		R2=6		PC=4
and r1 r3 r2		R3=12		PC=8
b      +1		PC+4+4		PC=12
ori r1 r7 1 δεν περιμενουμε να εκτελεστει αφου brunch
beq r1 r2 +2	R1=R2=6 =>PC+4+8=PC+12	PC=20
bne r1 r2 -1  δεν περιμενουμε να εκτελεστει αφου beq
lw  r5 r12 +4	δεν περιμενουμε να εκτελεστει αφου beq
sw  r5 r10 +4	περιμένω να δω στην θέση MEM[2] αφου r5  έχει  0...00 + immed 0..100=> [11downto 2[θεση=> 0...100]="0...1"] αποτέλεσμα r10 "0...0"  
lw  r5 r1 +4	στον r1 βάζω MEM[2] αφου r5  έχει  0...00 + immed 0..100=> [11downto 2[θεση=> 0...100]="0...1"] αρα ο r1 απο 6 θα γίνει 0
lb  r5	r2 +1 	η alu θα βγάλει byte_sel 10 άρα παίρνω το 3o byte 	

